diff --git a/bom/pom.xml b/bom/pom.xml
index 1e75e3908..a000edf9e 100644
--- a/bom/pom.xml
+++ b/bom/pom.xml
@@ -129,7 +129,7 @@
 				<groupId>net.i2p.crypto</groupId>
 				<artifactId>eddsa</artifactId>
 				<version>${eddsa.version}</version>
-				<scope>runtime</scope>
+				<!-- <scope>runtime</scope> -->
 			</dependency>
 
 			<dependency>
diff --git a/californium-core/src/main/java/org/eclipse/californium/core/config/CoapConfig.java b/californium-core/src/main/java/org/eclipse/californium/core/config/CoapConfig.java
index 21e7066d8..b6176fc32 100644
--- a/californium-core/src/main/java/org/eclipse/californium/core/config/CoapConfig.java
+++ b/californium-core/src/main/java/org/eclipse/californium/core/config/CoapConfig.java
@@ -388,7 +388,7 @@ public final class CoapConfig {
 	 * target="_blank">RFC7252, 4.8. Transmission Parameters</a>.
 	 */
 	public static final IntegerDefinition MAX_RETRANSMIT = new IntegerDefinition(MODULE + "MAX_RETRANSMIT",
-			"Maximum number of CoAP retransmissions.", 4, 1);
+			"Maximum number of CoAP retransmissions.", 4, 0);
 	/**
 	 * The EXCHANGE_LIFETIME for CON requests. See
 	 * <a href="https://datatracker.ietf.org/doc/html/rfc7252#section-4.8.2"
diff --git a/californium-core/src/main/java/org/eclipse/californium/core/network/stack/ReliabilityLayerParameters.java b/californium-core/src/main/java/org/eclipse/californium/core/network/stack/ReliabilityLayerParameters.java
index 41d06c9cc..9bd3d912b 100644
--- a/californium-core/src/main/java/org/eclipse/californium/core/network/stack/ReliabilityLayerParameters.java
+++ b/californium-core/src/main/java/org/eclipse/californium/core/network/stack/ReliabilityLayerParameters.java
@@ -281,8 +281,8 @@ public class ReliabilityLayerParameters {
 				throw new IllegalStateException("Maximum ack timeout " + maxAckTimeout
 						+ "ms must not be less than ack timeout " + ackTimeout + "ms!");
 			}
-			if (1 > maxRetransmit) {
-				throw new IllegalStateException("Maxium retransmit " + maxRetransmit + " must not be less than 1!");
+			if (0 > maxRetransmit) {
+				throw new IllegalStateException("Maximum retransmit " + maxRetransmit + " must not be less than 0!");
 			}
 			if (1 > nstart) {
 				throw new IllegalStateException("Nstart " + nstart + " must not be less than 1!");
diff --git a/cf-edhoc/pom.xml b/cf-edhoc/pom.xml
index dc1f3f3d9..e0831e668 100644
--- a/cf-edhoc/pom.xml
+++ b/cf-edhoc/pom.xml
@@ -71,7 +71,8 @@
 				<artifactId>maven-assembly-plugin</artifactId>
 				<configuration>
 					<descriptorRefs>
-						<descriptorRef>enhanced-jar-with-licenses</descriptorRef>
+						<!-- <descriptorRef>enhanced-jar-with-licenses</descriptorRef> -->
+						<descriptorRef>jar-with-dependencies</descriptorRef>
 					</descriptorRefs>
 				</configuration>
 			</plugin>
diff --git a/cf-edhoc/src/main/java/org/eclipse/californium/edhoc/Hkdf.java b/cf-edhoc/src/main/java/org/eclipse/californium/edhoc/Hkdf.java
index 40a137656..b4d4c5114 100644
--- a/cf-edhoc/src/main/java/org/eclipse/californium/edhoc/Hkdf.java
+++ b/cf-edhoc/src/main/java/org/eclipse/californium/edhoc/Hkdf.java
@@ -42,7 +42,7 @@ public class Hkdf {
 	 * @throws InvalidKeyException if the HMAC procedure fails
 	 * @throws NoSuchAlgorithmException if an unknown HMAC is used
 	 */
-	static byte[] extractExpand(byte[] salt, byte[] ikm, byte[] info, int len)
+	public static byte[] extractExpand(byte[] salt, byte[] ikm, byte[] info, int len)
 			throws InvalidKeyException, NoSuchAlgorithmException {
 
 		final String digest = "SHA256"; // Hash to use
@@ -87,7 +87,7 @@ public class Hkdf {
 	 * @throws InvalidKeyException if the HMAC procedure fails
 	 * @throws NoSuchAlgorithmException if an unknown HMAC is used
 	 */
-	static byte[] extract(byte[] salt, byte[] ikm) throws InvalidKeyException, NoSuchAlgorithmException {
+	public static byte[] extract(byte[] salt, byte[] ikm) throws InvalidKeyException, NoSuchAlgorithmException {
 
 		final String digest = "SHA256"; // Hash to use
 
@@ -115,7 +115,7 @@ public class Hkdf {
 	 * @throws InvalidKeyException if the HMAC procedure fails
 	 * @throws NoSuchAlgorithmException if an unknown HMAC is used
 	 */
-	static byte[] expand(byte[] prk, byte[] info, int len) throws InvalidKeyException, NoSuchAlgorithmException {
+	public static byte[] expand(byte[] prk, byte[] info, int len) throws InvalidKeyException, NoSuchAlgorithmException {
 
 		final String digest = "SHA256"; // Hash to use
 
diff --git a/cf-edhoc/src/main/java/org/eclipse/californium/edhoc/SharedSecretCalculation.java b/cf-edhoc/src/main/java/org/eclipse/californium/edhoc/SharedSecretCalculation.java
index 78fc7c2f2..2ecc18748 100644
--- a/cf-edhoc/src/main/java/org/eclipse/californium/edhoc/SharedSecretCalculation.java
+++ b/cf-edhoc/src/main/java/org/eclipse/californium/edhoc/SharedSecretCalculation.java
@@ -286,7 +286,7 @@ public class SharedSecretCalculation {
 	 * 
 	 * @return a OneKey representing the input material
 	 */
-	static OneKey buildEd25519OneKey(byte[] privateKey, byte[] publicKey) {
+	public static OneKey buildEd25519OneKey(byte[] privateKey, byte[] publicKey) {
 		byte[] rgbX = publicKey;
 		byte[] rgbD = privateKey;
 
@@ -321,7 +321,7 @@ public class SharedSecretCalculation {
 	 * 
 	 * @return a OneKey representing the input material
 	 */
-	static OneKey buildCurve25519OneKey(byte[] privateKey, byte[] publicKey) {
+	public static OneKey buildCurve25519OneKey(byte[] privateKey, byte[] publicKey) {
 		byte[] rgbX = publicKey;
 		byte[] rgbD = privateKey;
 
@@ -346,7 +346,7 @@ public class SharedSecretCalculation {
 	 * @param publicKey the public key bytes
 	 * @return a Java KeyPair representing the input material
 	 */
-	static KeyPair buildEd25519JavaKey(byte[] privateKey, byte[] publicKey) {
+	public static KeyPair buildEd25519JavaKey(byte[] privateKey, byte[] publicKey) {
 		EdDSAPrivateKeySpec privSpec = new EdDSAPrivateKeySpec(privateKey, EdDSANamedCurveTable.getByName("Ed25519"));
 		EdDSAPrivateKey priv = new EdDSAPrivateKey(privSpec);
 		EdDSAPublicKeySpec pubSpec = new EdDSAPublicKeySpec(publicKey, EdDSANamedCurveTable.getByName("Ed25519"));
@@ -364,7 +364,7 @@ public class SharedSecretCalculation {
 	 * @param privateKey the private key bytes
 	 * @return the public key bytes
 	 */
-	static byte[] calculatePublicEd25519FromPrivate(byte[] privateKey) {
+	public static byte[] calculatePublicEd25519FromPrivate(byte[] privateKey) {
 		EdDSANamedCurveSpec spec = EdDSANamedCurveTable.getByName("Ed25519");
 		byte[] seed = privateKey;
 		EdDSAPrivateKeySpec privKeySpec = new EdDSAPrivateKeySpec(seed, spec);
@@ -385,7 +385,7 @@ public class SharedSecretCalculation {
 	 * 
 	 * @return a OneKey representing the input material
 	 */
-	static OneKey buildEcdsa384OneKey(byte[] privateKey, byte[] publicKeyX, boolean signY) {
+	public static OneKey buildEcdsa384OneKey(byte[] privateKey, byte[] publicKeyX, boolean signY) {
 		// Recalculate Y value
 		byte[] publicKeyY = null;
 		try {
@@ -409,7 +409,7 @@ public class SharedSecretCalculation {
 	 * 
 	 * @return a OneKey representing the input material
 	 */
-	static OneKey buildEcdsa384OneKey(byte[] privateKey, byte[] publicKeyX, byte[] publicKeyY) {
+	public static OneKey buildEcdsa384OneKey(byte[] privateKey, byte[] publicKeyX, byte[] publicKeyY) {
 
 		// Attempt to recalculate Y value if missing
 		if (publicKeyY == null) {
@@ -452,7 +452,7 @@ public class SharedSecretCalculation {
 	 * 
 	 * @return a OneKey representing the input material
 	 */
-	static OneKey buildEcdsa256OneKey(byte[] privateKey, byte[] publicKeyX, boolean signY) {
+	public static OneKey buildEcdsa256OneKey(byte[] privateKey, byte[] publicKeyX, boolean signY) {
 		// Recalculate Y value
 		byte[] publicKeyY = null;
 		try {
@@ -476,7 +476,7 @@ public class SharedSecretCalculation {
 	 * 
 	 * @return a OneKey representing the input material
 	 */
-	static OneKey buildEcdsa256OneKey(byte[] privateKey, byte[] publicKeyX, byte[] publicKeyY) {
+	public static OneKey buildEcdsa256OneKey(byte[] privateKey, byte[] publicKeyX, byte[] publicKeyY) {
 
         // Attempt to recalculate Y value if missing
 		if (publicKeyY == null) {
@@ -508,6 +508,31 @@ public class SharedSecretCalculation {
 		return key;
 	}
 
+	/**
+	 * Takes a byte array and returns a new left zero-padded array of the
+	 * specified length, if the input array is smaller than the specified length.
+	 * Otherwise the original array is returned.
+	 *
+	 * @param base the original byte array
+	 * @param length the desired length of the output
+	 *
+	 * @return a byte array of the specified length after adding leftmost zero-padding
+	 *         or the original byte array
+	 */
+	public static byte[] padLeft(byte[] base, int length) {
+		if (base.length >= length) {
+			return base;
+		}
+
+		int b_offset = 0;
+		int r_offset = length - base.length;
+		int r_length = base.length;
+		byte[] result = new byte[length];
+
+		System.arraycopy(base, b_offset, result, r_offset, r_length);
+		return result;
+	}
+
 	/**
 	 * Takes an ECDSA_256 X coordinate and computes a valid Y value for that X.
 	 * Will only only return one of the possible Y values.
@@ -530,7 +555,7 @@ public class SharedSecretCalculation {
 	 * @return the recomputed Y value for that X
 	 * @throws CoseException if recomputation fails
 	 */
-	static byte[] recomputeEcdsa256YFromX(byte[] publicKeyX, boolean signY) throws CoseException {
+	public static byte[] recomputeEcdsa256YFromX(byte[] publicKeyX, boolean signY) throws CoseException {
 
 		BigInteger x = new BigInteger(1, publicKeyX);
 
@@ -557,8 +582,8 @@ public class SharedSecretCalculation {
 		// System.out.println("Root2: " +
 		// StringUtil.byteArray2HexString(root2.toByteArray()));
 
-		byte[] root1Bytes = root1.toByteArray();
-		byte[] root2Bytes = root2.toByteArray();
+		byte[] root1Bytes = padLeft(root1.toByteArray(), 32);
+		byte[] root2Bytes = padLeft(root2.toByteArray(), 32);
 
 		if (root1Bytes.length == 33) {
 			root1Bytes = Arrays.copyOfRange(root1Bytes, 1, 33);
@@ -567,7 +592,7 @@ public class SharedSecretCalculation {
 			root2Bytes = Arrays.copyOfRange(root2Bytes, 1, 33);
 		}
 
-		byte[] xBytes = x.toByteArray();
+		byte[] xBytes = padLeft(x.toByteArray(), 32);
 		if (xBytes.length == 33) {
 			xBytes = Arrays.copyOfRange(xBytes, 1, 33);
 		}
@@ -642,7 +667,7 @@ public class SharedSecretCalculation {
 	 * @return the recomputed Y value for that X
 	 * @throws CoseException if recomputation fails
 	 */
-	static byte[] recomputeEcdsa384YFromX(byte[] publicKeyX, boolean signY) throws CoseException {
+	public static byte[] recomputeEcdsa384YFromX(byte[] publicKeyX, boolean signY) throws CoseException {
 
 		BigInteger x = new BigInteger(1, publicKeyX);
 
@@ -667,8 +692,8 @@ public class SharedSecretCalculation {
 		BigInteger root1 = squareMod(combined, prime);
 		BigInteger root2 = root1.negate().mod(prime);
 
-		byte[] root1Bytes = root1.toByteArray();
-		byte[] root2Bytes = root2.toByteArray();
+		byte[] root1Bytes = padLeft(root1.toByteArray(), 48);
+		byte[] root2Bytes = padLeft(root2.toByteArray(), 48);
 
 		if (root1Bytes.length == 49) {
 			root1Bytes = Arrays.copyOfRange(root1Bytes, 1, 49);
@@ -677,7 +702,7 @@ public class SharedSecretCalculation {
 			root2Bytes = Arrays.copyOfRange(root2Bytes, 1, 49);
 		}
 
-		byte[] xBytes = x.toByteArray();
+		byte[] xBytes = padLeft(x.toByteArray(), 48);
 		if (xBytes.length == 49) {
 			xBytes = Arrays.copyOfRange(xBytes, 1, 49);
 		}
@@ -752,7 +777,7 @@ public class SharedSecretCalculation {
      * @param val the value to square
      * @return one of the square roots
      */
-	static BigInteger squareMod(BigInteger val, BigInteger prime) {
+	protected static BigInteger squareMod(BigInteger val, BigInteger prime) {
 
 		BigInteger three = new BigInteger("3");
 		BigInteger four = new BigInteger("4");
@@ -777,7 +802,7 @@ public class SharedSecretCalculation {
 	 * 
 	 * @return the shared secret, or null in case of error
 	 */
-	static byte[] generateSharedSecret(OneKey privateKey, OneKey publicKey) {
+	public static byte[] generateSharedSecret(OneKey privateKey, OneKey publicKey) {
 
 		if (privateKey == null || publicKey == null) {
 			System.err.println("Public key and/or private key not found.");
@@ -847,7 +872,7 @@ public class SharedSecretCalculation {
 	 * 
 	 * @throws CoseException
 	 */
-	static OneKey convertEd25519ToCurve25519(OneKey initialKey) throws CoseException {
+	protected static OneKey convertEd25519ToCurve25519(OneKey initialKey) throws CoseException {
 
 		FieldElement y = null;
 		try {
diff --git a/cf-edhoc/src/main/java/org/eclipse/californium/edhoc/Util.java b/cf-edhoc/src/main/java/org/eclipse/californium/edhoc/Util.java
index 8b887aa6a..b6eab5b87 100644
--- a/cf-edhoc/src/main/java/org/eclipse/californium/edhoc/Util.java
+++ b/cf-edhoc/src/main/java/org/eclipse/californium/edhoc/Util.java
@@ -1186,7 +1186,7 @@ public class Util {
 		claimSetMap.Add(Constants.CWT_CLAIMS_SUB, subjectName);
 		claimSetMap.Add(Constants.CWT_CLAIMS_CNF, cnfMap);
 
-		System.out.println("CCS serialization: " + StringUtil.byteArray2HexString(claimSetMap.EncodeToBytes()));
+		//System.out.println("CCS serialization: " + StringUtil.byteArray2HexString(claimSetMap.EncodeToBytes()));
 		
         return claimSetMap.EncodeToBytes();
 		
diff --git a/cf-oscore/pom.xml b/cf-oscore/pom.xml
index 6d0cfe69d..cc02cec3c 100644
--- a/cf-oscore/pom.xml
+++ b/cf-oscore/pom.xml
@@ -41,7 +41,8 @@
         	<dependency> <!-- Rikard: Added this dependency -->
 	            <groupId>net.i2p.crypto</groupId>
 	            <artifactId>eddsa</artifactId>
-	            <version>0.2.0</version>
+	            <!-- <version>0.2.0</version> -->
+	            <version>${eddsa.version}</version>
 	            <type>jar</type>
         	</dependency>
 		<dependency> <!-- Rikard: Added this dependency (Curve25519) -->
diff --git a/cf-oscore/src/main/java/org/eclipse/californium/cose/EncryptCommon.java b/cf-oscore/src/main/java/org/eclipse/californium/cose/EncryptCommon.java
index 7112a06d6..169430d76 100644
--- a/cf-oscore/src/main/java/org/eclipse/californium/cose/EncryptCommon.java
+++ b/cf-oscore/src/main/java/org/eclipse/californium/cose/EncryptCommon.java
@@ -196,7 +196,7 @@ public abstract class EncryptCommon extends Message {
 			}
 			throw new CoseException("Decryption failure", ex);
 		} catch (Exception ex) {
-			ex.printStackTrace();
+			//ex.printStackTrace();
 			throw new CoseException("Decryption failure", ex);
 		}
 	}
diff --git a/cf-oscore/src/main/java/org/eclipse/californium/cose/SignCommon.java b/cf-oscore/src/main/java/org/eclipse/californium/cose/SignCommon.java
index 0e3edf27f..58704197a 100644
--- a/cf-oscore/src/main/java/org/eclipse/californium/cose/SignCommon.java
+++ b/cf-oscore/src/main/java/org/eclipse/californium/cose/SignCommon.java
@@ -96,7 +96,7 @@ public abstract class SignCommon extends Message {
             sig.initSign(privKey);
             sig.update(rgbToBeSigned);
             
-			System.out.println("COSE: To be signed: " + Utils.toHexString(rgbToBeSigned));
+			//System.out.println("COSE: To be signed: " + Utils.toHexString(rgbToBeSigned));
             
             result = sig.sign();
             if (sigLen > 0) {
@@ -200,7 +200,7 @@ public abstract class SignCommon extends Message {
             sig.initVerify(pubKey);
             sig.update(rgbToBeSigned);
             
-			System.out.println("COSE: To be signed (checked): " + Utils.toHexString(rgbToBeSigned));
+			//System.out.println("COSE: To be signed (checked): " + Utils.toHexString(rgbToBeSigned));
 
             if (convert) {
                 rgbSignature = convertConcatToDer(rgbSignature);
